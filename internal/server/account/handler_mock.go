// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockaccountUCManager is a mock of accountUCManager interface.
type MockaccountUCManager struct {
	ctrl     *gomock.Controller
	recorder *MockaccountUCManagerMockRecorder
}

// MockaccountUCManagerMockRecorder is the mock recorder for MockaccountUCManager.
type MockaccountUCManagerMockRecorder struct {
	mock *MockaccountUCManager
}

// NewMockaccountUCManager creates a new mock instance.
func NewMockaccountUCManager(ctrl *gomock.Controller) *MockaccountUCManager {
	mock := &MockaccountUCManager{ctrl: ctrl}
	mock.recorder = &MockaccountUCManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountUCManager) EXPECT() *MockaccountUCManagerMockRecorder {
	return m.recorder
}

// UserSignUp mocks base method.
func (m *MockaccountUCManager) UserSignUp(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockaccountUCManagerMockRecorder) UserSignUp(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockaccountUCManager)(nil).UserSignUp), ctx, email, password)
}

// MockinfraProvider is a mock of infraProvider interface.
type MockinfraProvider struct {
	ctrl     *gomock.Controller
	recorder *MockinfraProviderMockRecorder
}

// MockinfraProviderMockRecorder is the mock recorder for MockinfraProvider.
type MockinfraProviderMockRecorder struct {
	mock *MockinfraProvider
}

// NewMockinfraProvider creates a new mock instance.
func NewMockinfraProvider(ctrl *gomock.Controller) *MockinfraProvider {
	mock := &MockinfraProvider{ctrl: ctrl}
	mock.recorder = &MockinfraProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinfraProvider) EXPECT() *MockinfraProviderMockRecorder {
	return m.recorder
}

// JsonUnmarshal mocks base method.
func (m *MockinfraProvider) JsonUnmarshal(input []byte, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonUnmarshal", input, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// JsonUnmarshal indicates an expected call of JsonUnmarshal.
func (mr *MockinfraProviderMockRecorder) JsonUnmarshal(input, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonUnmarshal", reflect.TypeOf((*MockinfraProvider)(nil).JsonUnmarshal), input, dest)
}

// ReadAll mocks base method.
func (m *MockinfraProvider) ReadAll(input io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockinfraProviderMockRecorder) ReadAll(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockinfraProvider)(nil).ReadAll), input)
}
