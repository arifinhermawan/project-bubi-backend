// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	pgsql "github.com/arifinhermawan/bubi/internal/repository/pgsql"
	gomock "github.com/golang/mock/gomock"
)

// MockdbRepoProvider is a mock of dbRepoProvider interface.
type MockdbRepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdbRepoProviderMockRecorder
}

// MockdbRepoProviderMockRecorder is the mock recorder for MockdbRepoProvider.
type MockdbRepoProviderMockRecorder struct {
	mock *MockdbRepoProvider
}

// NewMockdbRepoProvider creates a new mock instance.
func NewMockdbRepoProvider(ctrl *gomock.Controller) *MockdbRepoProvider {
	mock := &MockdbRepoProvider{ctrl: ctrl}
	mock.recorder = &MockdbRepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbRepoProvider) EXPECT() *MockdbRepoProviderMockRecorder {
	return m.recorder
}

// BeginTX mocks base method.
func (m *MockdbRepoProvider) BeginTX(ctx context.Context, options *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTX", ctx, options)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTX indicates an expected call of BeginTX.
func (mr *MockdbRepoProviderMockRecorder) BeginTX(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTX", reflect.TypeOf((*MockdbRepoProvider)(nil).BeginTX), ctx, options)
}

// Commit mocks base method.
func (m *MockdbRepoProvider) Commit(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockdbRepoProviderMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockdbRepoProvider)(nil).Commit), tx)
}

// GetUserAccountByEmail mocks base method.
func (m *MockdbRepoProvider) GetUserAccountByEmail(ctx context.Context, email string) (pgsql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByEmail", ctx, email)
	ret0, _ := ret[0].(pgsql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByEmail indicates an expected call of GetUserAccountByEmail.
func (mr *MockdbRepoProviderMockRecorder) GetUserAccountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByEmail", reflect.TypeOf((*MockdbRepoProvider)(nil).GetUserAccountByEmail), ctx, email)
}

// InsertUserAccount mocks base method.
func (m *MockdbRepoProvider) InsertUserAccount(ctx context.Context, tx *sql.Tx, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAccount", ctx, tx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAccount indicates an expected call of InsertUserAccount.
func (mr *MockdbRepoProviderMockRecorder) InsertUserAccount(ctx, tx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAccount", reflect.TypeOf((*MockdbRepoProvider)(nil).InsertUserAccount), ctx, tx, email, password)
}

// Rollback mocks base method.
func (m *MockdbRepoProvider) Rollback(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockdbRepoProviderMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockdbRepoProvider)(nil).Rollback), tx)
}
