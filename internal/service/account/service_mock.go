// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	reflect "reflect"

	entity "github.com/arifinhermawan/bubi/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockresourceProvider is a mock of resourceProvider interface.
type MockresourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockresourceProviderMockRecorder
}

// MockresourceProviderMockRecorder is the mock recorder for MockresourceProvider.
type MockresourceProviderMockRecorder struct {
	mock *MockresourceProvider
}

// NewMockresourceProvider creates a new mock instance.
func NewMockresourceProvider(ctrl *gomock.Controller) *MockresourceProvider {
	mock := &MockresourceProvider{ctrl: ctrl}
	mock.recorder = &MockresourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceProvider) EXPECT() *MockresourceProviderMockRecorder {
	return m.recorder
}

// GetUserAccountByEmailFromDB mocks base method.
func (m *MockresourceProvider) GetUserAccountByEmailFromDB(ctx context.Context, email string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByEmailFromDB", ctx, email)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByEmailFromDB indicates an expected call of GetUserAccountByEmailFromDB.
func (mr *MockresourceProviderMockRecorder) GetUserAccountByEmailFromDB(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByEmailFromDB", reflect.TypeOf((*MockresourceProvider)(nil).GetUserAccountByEmailFromDB), ctx, email)
}

// InsertUserAccountToDB mocks base method.
func (m *MockresourceProvider) InsertUserAccountToDB(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAccountToDB", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAccountToDB indicates an expected call of InsertUserAccountToDB.
func (mr *MockresourceProviderMockRecorder) InsertUserAccountToDB(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAccountToDB", reflect.TypeOf((*MockresourceProvider)(nil).InsertUserAccountToDB), ctx, email, password)
}
