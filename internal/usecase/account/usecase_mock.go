// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockaccountServiceProvider is a mock of accountServiceProvider interface.
type MockaccountServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockaccountServiceProviderMockRecorder
}

// MockaccountServiceProviderMockRecorder is the mock recorder for MockaccountServiceProvider.
type MockaccountServiceProviderMockRecorder struct {
	mock *MockaccountServiceProvider
}

// NewMockaccountServiceProvider creates a new mock instance.
func NewMockaccountServiceProvider(ctrl *gomock.Controller) *MockaccountServiceProvider {
	mock := &MockaccountServiceProvider{ctrl: ctrl}
	mock.recorder = &MockaccountServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountServiceProvider) EXPECT() *MockaccountServiceProviderMockRecorder {
	return m.recorder
}

// CheckIsAccountExist mocks base method.
func (m *MockaccountServiceProvider) CheckIsAccountExist(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsAccountExist", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsAccountExist indicates an expected call of CheckIsAccountExist.
func (mr *MockaccountServiceProviderMockRecorder) CheckIsAccountExist(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsAccountExist", reflect.TypeOf((*MockaccountServiceProvider)(nil).CheckIsAccountExist), ctx, email)
}

// InsertUserAccount mocks base method.
func (m *MockaccountServiceProvider) InsertUserAccount(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAccount", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAccount indicates an expected call of InsertUserAccount.
func (mr *MockaccountServiceProviderMockRecorder) InsertUserAccount(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAccount", reflect.TypeOf((*MockaccountServiceProvider)(nil).InsertUserAccount), ctx, email, password)
}
