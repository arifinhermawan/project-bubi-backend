// Code generated by MockGen. DO NOT EDIT.
// Source: infra.go

// Package server is a generated GoMock package.
package server

import (
	io "io"
	http "net/http"
	reflect "reflect"
	time "time"

	configuration "github.com/arifinhermawan/bubi/internal/infrastructure/configuration"
	gomock "github.com/golang/mock/gomock"
)

// MockauthenticationProvider is a mock of authenticationProvider interface.
type MockauthenticationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockauthenticationProviderMockRecorder
}

// MockauthenticationProviderMockRecorder is the mock recorder for MockauthenticationProvider.
type MockauthenticationProviderMockRecorder struct {
	mock *MockauthenticationProvider
}

// NewMockauthenticationProvider creates a new mock instance.
func NewMockauthenticationProvider(ctrl *gomock.Controller) *MockauthenticationProvider {
	mock := &MockauthenticationProvider{ctrl: ctrl}
	mock.recorder = &MockauthenticationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthenticationProvider) EXPECT() *MockauthenticationProviderMockRecorder {
	return m.recorder
}

// JWTAuthorization mocks base method.
func (m *MockauthenticationProvider) JWTAuthorization(endpointHandler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTAuthorization", endpointHandler)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// JWTAuthorization indicates an expected call of JWTAuthorization.
func (mr *MockauthenticationProviderMockRecorder) JWTAuthorization(endpointHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTAuthorization", reflect.TypeOf((*MockauthenticationProvider)(nil).JWTAuthorization), endpointHandler)
}

// MockconfigProvider is a mock of configProvider interface.
type MockconfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockconfigProviderMockRecorder
}

// MockconfigProviderMockRecorder is the mock recorder for MockconfigProvider.
type MockconfigProviderMockRecorder struct {
	mock *MockconfigProvider
}

// NewMockconfigProvider creates a new mock instance.
func NewMockconfigProvider(ctrl *gomock.Controller) *MockconfigProvider {
	mock := &MockconfigProvider{ctrl: ctrl}
	mock.recorder = &MockconfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconfigProvider) EXPECT() *MockconfigProviderMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockconfigProvider) GetConfig() *configuration.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*configuration.AppConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockconfigProviderMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockconfigProvider)(nil).GetConfig))
}

// MockgolangProvider is a mock of golangProvider interface.
type MockgolangProvider struct {
	ctrl     *gomock.Controller
	recorder *MockgolangProviderMockRecorder
}

// MockgolangProviderMockRecorder is the mock recorder for MockgolangProvider.
type MockgolangProviderMockRecorder struct {
	mock *MockgolangProvider
}

// NewMockgolangProvider creates a new mock instance.
func NewMockgolangProvider(ctrl *gomock.Controller) *MockgolangProvider {
	mock := &MockgolangProvider{ctrl: ctrl}
	mock.recorder = &MockgolangProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgolangProvider) EXPECT() *MockgolangProviderMockRecorder {
	return m.recorder
}

// GetTimeGMT7 mocks base method.
func (m *MockgolangProvider) GetTimeGMT7() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeGMT7")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeGMT7 indicates an expected call of GetTimeGMT7.
func (mr *MockgolangProviderMockRecorder) GetTimeGMT7() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeGMT7", reflect.TypeOf((*MockgolangProvider)(nil).GetTimeGMT7))
}

// JsonMarshal mocks base method.
func (m *MockgolangProvider) JsonMarshal(input interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonMarshal", input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JsonMarshal indicates an expected call of JsonMarshal.
func (mr *MockgolangProviderMockRecorder) JsonMarshal(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonMarshal", reflect.TypeOf((*MockgolangProvider)(nil).JsonMarshal), input)
}

// JsonUnmarshal mocks base method.
func (m *MockgolangProvider) JsonUnmarshal(input []byte, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonUnmarshal", input, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// JsonUnmarshal indicates an expected call of JsonUnmarshal.
func (mr *MockgolangProviderMockRecorder) JsonUnmarshal(input, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonUnmarshal", reflect.TypeOf((*MockgolangProvider)(nil).JsonUnmarshal), input, dest)
}

// MockreaderProvider is a mock of readerProvider interface.
type MockreaderProvider struct {
	ctrl     *gomock.Controller
	recorder *MockreaderProviderMockRecorder
}

// MockreaderProviderMockRecorder is the mock recorder for MockreaderProvider.
type MockreaderProviderMockRecorder struct {
	mock *MockreaderProvider
}

// NewMockreaderProvider creates a new mock instance.
func NewMockreaderProvider(ctrl *gomock.Controller) *MockreaderProvider {
	mock := &MockreaderProvider{ctrl: ctrl}
	mock.recorder = &MockreaderProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreaderProvider) EXPECT() *MockreaderProviderMockRecorder {
	return m.recorder
}

// ReadAll mocks base method.
func (m *MockreaderProvider) ReadAll(input io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockreaderProviderMockRecorder) ReadAll(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockreaderProvider)(nil).ReadAll), input)
}
