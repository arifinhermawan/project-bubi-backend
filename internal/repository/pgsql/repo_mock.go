// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package pgsql is a generated GoMock package.
package pgsql

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	configuration "github.com/arifinhermawan/bubi/internal/infrastructure/configuration"
	gomock "github.com/golang/mock/gomock"
)

// MockinfraProvider is a mock of infraProvider interface.
type MockinfraProvider struct {
	ctrl     *gomock.Controller
	recorder *MockinfraProviderMockRecorder
}

// MockinfraProviderMockRecorder is the mock recorder for MockinfraProvider.
type MockinfraProviderMockRecorder struct {
	mock *MockinfraProvider
}

// NewMockinfraProvider creates a new mock instance.
func NewMockinfraProvider(ctrl *gomock.Controller) *MockinfraProvider {
	mock := &MockinfraProvider{ctrl: ctrl}
	mock.recorder = &MockinfraProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinfraProvider) EXPECT() *MockinfraProviderMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockinfraProvider) GetConfig() *configuration.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*configuration.AppConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockinfraProviderMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockinfraProvider)(nil).GetConfig))
}

// GetTimeGMT7 mocks base method.
func (m *MockinfraProvider) GetTimeGMT7() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeGMT7")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeGMT7 indicates an expected call of GetTimeGMT7.
func (mr *MockinfraProviderMockRecorder) GetTimeGMT7() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeGMT7", reflect.TypeOf((*MockinfraProvider)(nil).GetTimeGMT7))
}

// MockpsqlProvider is a mock of psqlProvider interface.
type MockpsqlProvider struct {
	ctrl     *gomock.Controller
	recorder *MockpsqlProviderMockRecorder
}

// MockpsqlProviderMockRecorder is the mock recorder for MockpsqlProvider.
type MockpsqlProviderMockRecorder struct {
	mock *MockpsqlProvider
}

// NewMockpsqlProvider creates a new mock instance.
func NewMockpsqlProvider(ctrl *gomock.Controller) *MockpsqlProvider {
	mock := &MockpsqlProvider{ctrl: ctrl}
	mock.recorder = &MockpsqlProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpsqlProvider) EXPECT() *MockpsqlProviderMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockpsqlProvider) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockpsqlProviderMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockpsqlProvider)(nil).BeginTx), ctx, opts)
}

// GetContext mocks base method.
func (m *MockpsqlProvider) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockpsqlProviderMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockpsqlProvider)(nil).GetContext), varargs...)
}

// Rebind mocks base method.
func (m *MockpsqlProvider) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockpsqlProviderMockRecorder) Rebind(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockpsqlProvider)(nil).Rebind), query)
}
