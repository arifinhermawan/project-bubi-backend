// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo.go

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockinfraProvider is a mock of infraProvider interface.
type MockinfraProvider struct {
	ctrl     *gomock.Controller
	recorder *MockinfraProviderMockRecorder
}

// MockinfraProviderMockRecorder is the mock recorder for MockinfraProvider.
type MockinfraProviderMockRecorder struct {
	mock *MockinfraProvider
}

// NewMockinfraProvider creates a new mock instance.
func NewMockinfraProvider(ctrl *gomock.Controller) *MockinfraProvider {
	mock := &MockinfraProvider{ctrl: ctrl}
	mock.recorder = &MockinfraProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinfraProvider) EXPECT() *MockinfraProviderMockRecorder {
	return m.recorder
}

// JsonMarshal mocks base method.
func (m *MockinfraProvider) JsonMarshal(input interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonMarshal", input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JsonMarshal indicates an expected call of JsonMarshal.
func (mr *MockinfraProviderMockRecorder) JsonMarshal(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonMarshal", reflect.TypeOf((*MockinfraProvider)(nil).JsonMarshal), input)
}

// MockredisProvider is a mock of redisProvider interface.
type MockredisProvider struct {
	ctrl     *gomock.Controller
	recorder *MockredisProviderMockRecorder
}

// MockredisProviderMockRecorder is the mock recorder for MockredisProvider.
type MockredisProviderMockRecorder struct {
	mock *MockredisProvider
}

// NewMockredisProvider creates a new mock instance.
func NewMockredisProvider(ctrl *gomock.Controller) *MockredisProvider {
	mock := &MockredisProvider{ctrl: ctrl}
	mock.recorder = &MockredisProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisProvider) EXPECT() *MockredisProviderMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockredisProvider) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockredisProviderMockRecorder) Del(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockredisProvider)(nil).Del), varargs...)
}

// Exists mocks base method.
func (m *MockredisProvider) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockredisProviderMockRecorder) Exists(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockredisProvider)(nil).Exists), varargs...)
}

// Get mocks base method.
func (m *MockredisProvider) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockredisProviderMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockredisProvider)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockredisProvider) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisProviderMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockredisProvider)(nil).Set), ctx, key, value, expiration)
}
